0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish', './' ]
2 info using npm@2.1.2
3 info using node@v0.10.32
4 verbose node symlink /usr/local/bin/node
5 verbose publish [ './' ]
6 silly cache add args [ './', null ]
7 verbose cache add spec ./
8 silly cache add parsed spec { raw: './',
8 silly cache add   scope: null,
8 silly cache add   name: null,
8 silly cache add   rawSpec: './',
8 silly cache add   spec: '/Users/nickbottomley/Documents/nb/wassat',
8 silly cache add   type: 'local' }
9 verbose cache add local package /Users/nickbottomley/Documents/nb/wassat
10 verbose tar pack [ '/Users/nickbottomley/.npm/wassat/0.3.0/package.tgz', './' ]
11 verbose tarball /Users/nickbottomley/.npm/wassat/0.3.0/package.tgz
12 verbose folder ./
13 info prepublish wassat@0.3.0
14 verbose addLocalTarball adding from inside cache /Users/nickbottomley/.npm/wassat/0.3.0/package.tgz
15 silly publish { name: 'wassat',
15 silly publish   version: '0.3.0',
15 silly publish   description: 'what is that?',
15 silly publish   main: './dist/wassat.js',
15 silly publish   repository: { type: 'git', url: 'https://github.com/nickb1080/wassat.git' },
15 silly publish   dependencies: {},
15 silly publish   devDependencies: { chai: '^1.9.1', 'coffee-script': '^1.8.0', mocha: '^1.21.4' },
15 silly publish   scripts:
15 silly publish    { test: 'npm run compile && mocha --compilers coffee:coffee-script/register test/test.coffee -R spec',
15 silly publish      compile: 'coffee -c -o ./dist ./src/wassat.coffee' },
15 silly publish   author: { name: 'Nick Bottomley', url: 'github.com/nickb1080' },
15 silly publish   license: 'MIT',
15 silly publish   readme: '# wassat [![Build Status](https://travis-ci.org/nickb1080/wassat.svg)](https://travis-ci.org/nickb1080/wassat)\n_(What\'s that?)_\n\n## Installation and Usage\n\n`npm install wassat`\n\n`var wassat = require(\'wassat\');`\n\n## API\n\n#### `wassat(Object anything) -> String`\nThe main function accepts anything and returns a string. The result is an all-lowercase version of the basic JavaScript "class" of which the object is an instance. If it\'s an instance of something else (`HTMLElement` for example), it returns `"object"`. Under the hood, `wassat` uses `Object.prototype.toString`. For `null` and `undefined`, `wassat()` uses strict equality.\n\n- `wassat(\'abc\')` -> `\'string\'`\n- `wassat(123)` -> `\'number\'`\n- `wassat(NaN)` -> `\'number\'`\n- `wassat(true)` -> `\'boolean\'`\n- `wassat({})` -> `\'object\'`\n- `wassat([])` -> `\'array\'`\n- `wassat(function(){})` -> `\'function\'`\n- `wassat(new Date())` -> `\'date\'`\n- `wassat(new RegExp())` -> `\'regexp\'`\n- `wassat((function(){return arguments})())` -> `\'arguments\'`\n- `wassat(document.querySelector(\'div\'))` -> `\'object\'`\n- `wassat(null)` -> `\'null\'`\n- `wassat(undefined)` -> `\'undefined\'`\n\nThere is a corresponding "is" method for each type, as follows:\n\n#### `wassat.isString([Object anything]) -> Boolean`\n`true` if `wassat(anything) === \'string\'`, else `false`\n\n#### `wassat.isNumber([Object anything]) -> Boolean`\n`true` if `wassat(anything) === \'number\'`, else `false`\n\n_Note: Returns `true` for `NaN`_\n\n#### `wassat.isBoolean(Object anything) -> Boolean`\n`true` if `wassat(anything) === \'boolean\'`, else `false`\n\n#### `wassat.isArray(Object anything) -> Boolean`\n`true` if `wassat(anything) === \'array\'`, else `false`\n\n#### `wassat.isObject(Object anything) -> Boolean`\n`true` if `wassat(anything) === \'object\'`, else `false`\n\n#### `wassat.isFunction(Object anything) -> Boolean`\n`true` if `wassat(anything) === \'function\'`, else `false`\n\n#### `wassat.isDate(Object anything) -> Boolean`\n`true` if `wassat(anything) === \'date\'`, else `false`\n\n#### `wassat.isRegExp(Object anything) -> Boolean`\n`true` if `wassat(anything) === \'regexp\'`, else `false`\n\n#### `wassat.isArguments(Object anything) -> Boolean`\n`true` if `wassat(anything) === \'arguments\'`, else `false`\n\n#### `wassat.isNull(Object anything) -> Boolean`\n`true` if `wassat(anything) === \'null\'`, else `false`\n\n#### `wassat.isUndefined(Object anything) -> Boolean`\n`true` if `wassat(anything) === \'undefined\'`, else `false`\n\n#### `wassat.isNil(Object anything) -> Boolean`\n`true` if `wassat(anything) === \'null\'` **or** `wassat(anything) === \'undefined\'`\n\n#### `wassat.isIt(Object anything, Function ctor) -> Boolean`\nUses `instanceof` to check if `ctor`\'s prototype is in `anything`\'s prototype chain. Performs a little check for primitives so it can handle those too (since `"abc" instanceof String` is `false`). \n\n#### `wassat.isItExactly(Object anything, Function ctor) -> Boolean`\nCompares the prototype of `anything` (via `Object.getPrototypeOf`) to the value of `ctor.prototype` to see if `ctor` is the constructor function of `anything`. Performs a little check for primitives so it can handle those too (since `Object.getPrototypeOf("abc")` throws).\n',
15 silly publish   readmeFilename: 'README.md',
15 silly publish   gitHead: '086f6f5d41b0f14e2fab33ac8884c81b66d8d344',
15 silly publish   bugs: { url: 'https://github.com/nickb1080/wassat/issues' },
15 silly publish   homepage: 'https://github.com/nickb1080/wassat',
15 silly publish   _id: 'wassat@0.3.0',
15 silly publish   _shasum: '417b440cdeb73a1c70521b275c397f98ac93f40e',
15 silly publish   _from: '.' }
16 verbose mapToRegistry name wassat
17 verbose mapToRegistry uri https://registry.npmjs.org/wassat
18 verbose publish registryBase https://registry.npmjs.org/
19 verbose request on initialization, where is /wassat
20 verbose request after pass 1, where is /wassat
21 verbose request url raw /wassat
22 verbose request resolving registry [ 'https://registry.npmjs.org/', './wassat' ]
23 verbose request after pass 2, where is https://registry.npmjs.org/wassat
24 verbose request sending authorization for write operation
25 info attempt registry request try #1 at 20:50:47
26 verbose request id b08f7b0fffd7373b
27 http request PUT https://registry.npmjs.org/wassat
28 http 403 https://registry.npmjs.org/wassat
29 verbose headers { date: 'Sat, 25 Oct 2014 03:50:48 GMT',
29 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
29 verbose headers   'content-type': 'application/json',
29 verbose headers   'cache-control': 'max-age=60',
29 verbose headers   'content-length': '6130',
29 verbose headers   'accept-ranges': 'bytes',
29 verbose headers   via: '1.1 varnish',
29 verbose headers   'x-served-by': 'cache-lax1432-LAX',
29 verbose headers   'x-cache': 'MISS',
29 verbose headers   'x-cache-hits': '0',
29 verbose headers   'x-timer': 'S1414209047.909519,VS0,VE179',
29 verbose headers   'keep-alive': 'timeout=10, max=50',
29 verbose headers   connection: 'Keep-Alive' }
30 error publish Failed PUT 403
31 verbose stack Error: forbidden cannot modify pre-existing version: 0.3.0
31 verbose stack old={"name":"wassat","version":"0.3.0","description":"what is that?","main":"./dist/wassat.js","repository":{"type":"git","url":"https://github.com/nickb1080/wassat.git"},"dependencies":{},"devDependencies":{"chai":"^1.9.1","coffee-script":"^1.8.0","mocha":"^1.21.4"},"scripts":{"test":"npm run compile && mocha --compilers coffee:coffee-script/register test/test.coffee -R spec","compile":"coffee -c -o ./dist ./src/wassat.coffee"},"author":{"name":"Nick Bottomley","url":"github.com/nickb1080"},"license":"MIT","gitHead":"53349a6cb5483847ce525fadb97756c802465b19","bugs":{"url":"https://github.com/nickb1080/wassat/issues"},"homepage":"https://github.com/nickb1080/wassat","_id":"wassat@0.3.0","_shasum":"fb482477e9dc215dbe218d8131dd7b530cf1661b","_from":"./","_npmVersion":"1.4.24","_npmUser":{"name":"nickbottomley","email":"nhbottomley@gmail.com"},"maintainers":[{"name":"nickbottomley","email":"nhbottomley@gmail.com"}],"dist":{"shasum":"fb482477e9dc215dbe218d8131dd7b530cf1661b","tarball":"http://registry.npmjs.org/wassat/-/wassat-0.3.0.tgz"}}
31 verbose stack new={"name":"wassat","version":"0.3.0","description":"what is that?","main":"./dist/wassat.js","repository":{"type":"git","url":"https://github.com/nickb1080/wassat.git"},"dependencies":{},"devDependencies":{"chai":"^1.9.1","coffee-script":"^1.8.0","mocha":"^1.21.4"},"scripts":{"test":"npm run compile && mocha --compilers coffee:coffee-script/register test/test.coffee -R spec","compile":"coffee -c -o ./dist ./src/wassat.coffee"},"author":{"name":"Nick Bottomley","url":"github.com/nickb1080"},"license":"MIT","readme":"# wassat [![Build Status](https://travis-ci.org/nickb1080/wassat.svg)](https://travis-ci.org/nickb1080/wassat)\u000a_(What's that?)_\u000a\u000a## Installation and Usage\u000a\u000a`npm install wassat`\u000a\u000a`var wassat = require('wassat');`\u000a\u000a## API\u000a\u000a#### `wassat(Object anything) -> String`\u000aThe main function accepts anything and returns a string. The result is an all-lowercase version of the basic JavaScript \"class\" of which the object is an instance. If it's an instance of something else (`HTMLElement` for example), it returns `\"object\"`. Under the hood, `wassat` uses `Object.prototype.toString`. For `null` and `undefined`, `wassat()` uses strict equality.\u000a\u000a- `wassat('abc')` -> `'string'`\u000a- `wassat(123)` -> `'number'`\u000a- `wassat(NaN)` -> `'number'`\u000a- `wassat(true)` -> `'boolean'`\u000a- `wassat({})` -> `'object'`\u000a- `wassat([])` -> `'array'`\u000a- `wassat(function(){})` -> `'function'`\u000a- `wassat(new Date())` -> `'date'`\u000a- `wassat(new RegExp())` -> `'regexp'`\u000a- `wassat((function(){return arguments})())` -> `'arguments'`\u000a- `wassat(document.querySelector('div'))` -> `'object'`\u000a- `wassat(null)` -> `'null'`\u000a- `wassat(undefined)` -> `'undefined'`\u000a\u000aThere is a corresponding \"is\" method for each type, as follows:\u000a\u000a#### `wassat.isString([Object anything]) -> Boolean`\u000a`true` if `wassat(anything) === 'string'`, else `false`\u000a\u000a#### `wassat.isNumber([Object anything]) -> Boolean`\u000a`true` if `wassat(anything) === 'number'`, else `false`\u000a\u000a_Note: Returns `true` for `NaN`_\u000a\u000a#### `wassat.isBoolean(Object anything) -> Boolean`\u000a`true` if `wassat(anything) === 'boolean'`, else `false`\u000a\u000a#### `wassat.isArray(Object anything) -> Boolean`\u000a`true` if `wassat(anything) === 'array'`, else `false`\u000a\u000a#### `wassat.isObject(Object anything) -> Boolean`\u000a`true` if `wassat(anything) === 'object'`, else `false`\u000a\u000a#### `wassat.isFunction(Object anything) -> Boolean`\u000a`true` if `wassat(anything) === 'function'`, else `false`\u000a\u000a#### `wassat.isDate(Object anything) -> Boolean`\u000a`true` if `wassat(anything) === 'date'`, else `false`\u000a\u000a#### `wassat.isRegExp(Object anything) -> Boolean`\u000a`true` if `wassat(anything) === 'regexp'`, else `false`\u000a\u000a#### `wassat.isArguments(Object anything) -> Boolean`\u000a`true` if `wassat(anything) === 'arguments'`, else `false`\u000a\u000a#### `wassat.isNull(Object anything) -> Boolean`\u000a`true` if `wassat(anything) === 'null'`, else `false`\u000a\u000a#### `wassat.isUndefined(Object anything) -> Boolean`\u000a`true` if `wassat(anything) === 'undefined'`, else `false`\u000a\u000a#### `wassat.isNil(Object anything) -> Boolean`\u000a`true` if `wassat(anything) === 'null'` **or** `wassat(anything) === 'undefined'`\u000a\u000a#### `wassat.isIt(Object anything, Function ctor) -> Boolean`\u000aUses `instanceof` to check if `ctor`'s prototype is in `anything`'s prototype chain. Performs a little check for primitives so it can handle those too (since `\"abc\" instanceof String` is `false`). \u000a\u000a#### `wassat.isItExactly(Object anything, Function ctor) -> Boolean`\u000aCompares the prototype of `anything` (via `Object.getPrototypeOf`) to the value of `ctor.prototype` to see if `ctor` is the constructor function of `anything`. Performs a little check for primitives so it can handle those too (since `Object.getPrototypeOf(\"abc\")` throws).\u000a","readmeFilename":"README.md","gitHead":"086f6f5d41b0f14e2fab33ac8884c81b66d8d344","bugs":{"url":"https://github.com/nickb1080/wassat/issues"},"homepage":"https://github.com/nickb1080/wassat","_id":"wassat@0.3.0","_shasum":"417b440cdeb73a1c70521b275c397f98ac93f40e","_from":".","_npmVersion":"2.1.2","_nodeVersion":"0.10.32","_npmUser":{"name":"nickbottomley","email":"nhbottomley@gmail.com"},"maintainers":[{"name":"nickbottomley","email":"nhbottomley@gmail.com"}],"dist":{"shasum":"417b440cdeb73a1c70521b275c397f98ac93f40e","tarball":"http://registry.npmjs.org/wassat/-/wassat-0.3.0.tgz"}}: wassat
31 verbose stack     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:260:14)
31 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:197:65)
31 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:237:22)
31 verbose stack     at Request.emit (events.js:98:17)
31 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1146:14)
31 verbose stack     at Request.emit (events.js:117:20)
31 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1097:12)
31 verbose stack     at IncomingMessage.emit (events.js:117:20)
31 verbose stack     at _stream_readable.js:943:16
31 verbose stack     at process._tickCallback (node.js:419:13)
32 verbose statusCode 403
33 verbose pkgid wassat
34 verbose cwd /Users/nickbottomley/Documents/nb/wassat
35 error Darwin 13.3.0
36 error argv "node" "/usr/local/bin/npm" "publish" "./"
37 error node v0.10.32
38 error npm  v2.1.2
39 error code E403
40 error forbidden cannot modify pre-existing version: 0.3.0
40 error old={"name":"wassat","version":"0.3.0","description":"what is that?","main":"./dist/wassat.js","repository":{"type":"git","url":"https://github.com/nickb1080/wassat.git"},"dependencies":{},"devDependencies":{"chai":"^1.9.1","coffee-script":"^1.8.0","mocha":"^1.21.4"},"scripts":{"test":"npm run compile && mocha --compilers coffee:coffee-script/register test/test.coffee -R spec","compile":"coffee -c -o ./dist ./src/wassat.coffee"},"author":{"name":"Nick Bottomley","url":"github.com/nickb1080"},"license":"MIT","gitHead":"53349a6cb5483847ce525fadb97756c802465b19","bugs":{"url":"https://github.com/nickb1080/wassat/issues"},"homepage":"https://github.com/nickb1080/wassat","_id":"wassat@0.3.0","_shasum":"fb482477e9dc215dbe218d8131dd7b530cf1661b","_from":"./","_npmVersion":"1.4.24","_npmUser":{"name":"nickbottomley","email":"nhbottomley@gmail.com"},"maintainers":[{"name":"nickbottomley","email":"nhbottomley@gmail.com"}],"dist":{"shasum":"fb482477e9dc215dbe218d8131dd7b530cf1661b","tarball":"http://registry.npmjs.org/wassat/-/wassat-0.3.0.tgz"}}
40 error new={"name":"wassat","version":"0.3.0","description":"what is that?","main":"./dist/wassat.js","repository":{"type":"git","url":"https://github.com/nickb1080/wassat.git"},"dependencies":{},"devDependencies":{"chai":"^1.9.1","coffee-script":"^1.8.0","mocha":"^1.21.4"},"scripts":{"test":"npm run compile && mocha --compilers coffee:coffee-script/register test/test.coffee -R spec","compile":"coffee -c -o ./dist ./src/wassat.coffee"},"author":{"name":"Nick Bottomley","url":"github.com/nickb1080"},"license":"MIT","readme":"# wassat [![Build Status](https://travis-ci.org/nickb1080/wassat.svg)](https://travis-ci.org/nickb1080/wassat)\u000a_(What's that?)_\u000a\u000a## Installation and Usage\u000a\u000a`npm install wassat`\u000a\u000a`var wassat = require('wassat');`\u000a\u000a## API\u000a\u000a#### `wassat(Object anything) -> String`\u000aThe main function accepts anything and returns a string. The result is an all-lowercase version of the basic JavaScript \"class\" of which the object is an instance. If it's an instance of something else (`HTMLElement` for example), it returns `\"object\"`. Under the hood, `wassat` uses `Object.prototype.toString`. For `null` and `undefined`, `wassat()` uses strict equality.\u000a\u000a- `wassat('abc')` -> `'string'`\u000a- `wassat(123)` -> `'number'`\u000a- `wassat(NaN)` -> `'number'`\u000a- `wassat(true)` -> `'boolean'`\u000a- `wassat({})` -> `'object'`\u000a- `wassat([])` -> `'array'`\u000a- `wassat(function(){})` -> `'function'`\u000a- `wassat(new Date())` -> `'date'`\u000a- `wassat(new RegExp())` -> `'regexp'`\u000a- `wassat((function(){return arguments})())` -> `'arguments'`\u000a- `wassat(document.querySelector('div'))` -> `'object'`\u000a- `wassat(null)` -> `'null'`\u000a- `wassat(undefined)` -> `'undefined'`\u000a\u000aThere is a corresponding \"is\" method for each type, as follows:\u000a\u000a#### `wassat.isString([Object anything]) -> Boolean`\u000a`true` if `wassat(anything) === 'string'`, else `false`\u000a\u000a#### `wassat.isNumber([Object anything]) -> Boolean`\u000a`true` if `wassat(anything) === 'number'`, else `false`\u000a\u000a_Note: Returns `true` for `NaN`_\u000a\u000a#### `wassat.isBoolean(Object anything) -> Boolean`\u000a`true` if `wassat(anything) === 'boolean'`, else `false`\u000a\u000a#### `wassat.isArray(Object anything) -> Boolean`\u000a`true` if `wassat(anything) === 'array'`, else `false`\u000a\u000a#### `wassat.isObject(Object anything) -> Boolean`\u000a`true` if `wassat(anything) === 'object'`, else `false`\u000a\u000a#### `wassat.isFunction(Object anything) -> Boolean`\u000a`true` if `wassat(anything) === 'function'`, else `false`\u000a\u000a#### `wassat.isDate(Object anything) -> Boolean`\u000a`true` if `wassat(anything) === 'date'`, else `false`\u000a\u000a#### `wassat.isRegExp(Object anything) -> Boolean`\u000a`true` if `wassat(anything) === 'regexp'`, else `false`\u000a\u000a#### `wassat.isArguments(Object anything) -> Boolean`\u000a`true` if `wassat(anything) === 'arguments'`, else `false`\u000a\u000a#### `wassat.isNull(Object anything) -> Boolean`\u000a`true` if `wassat(anything) === 'null'`, else `false`\u000a\u000a#### `wassat.isUndefined(Object anything) -> Boolean`\u000a`true` if `wassat(anything) === 'undefined'`, else `false`\u000a\u000a#### `wassat.isNil(Object anything) -> Boolean`\u000a`true` if `wassat(anything) === 'null'` **or** `wassat(anything) === 'undefined'`\u000a\u000a#### `wassat.isIt(Object anything, Function ctor) -> Boolean`\u000aUses `instanceof` to check if `ctor`'s prototype is in `anything`'s prototype chain. Performs a little check for primitives so it can handle those too (since `\"abc\" instanceof String` is `false`). \u000a\u000a#### `wassat.isItExactly(Object anything, Function ctor) -> Boolean`\u000aCompares the prototype of `anything` (via `Object.getPrototypeOf`) to the value of `ctor.prototype` to see if `ctor` is the constructor function of `anything`. Performs a little check for primitives so it can handle those too (since `Object.getPrototypeOf(\"abc\")` throws).\u000a","readmeFilename":"README.md","gitHead":"086f6f5d41b0f14e2fab33ac8884c81b66d8d344","bugs":{"url":"https://github.com/nickb1080/wassat/issues"},"homepage":"https://github.com/nickb1080/wassat","_id":"wassat@0.3.0","_shasum":"417b440cdeb73a1c70521b275c397f98ac93f40e","_from":".","_npmVersion":"2.1.2","_nodeVersion":"0.10.32","_npmUser":{"name":"nickbottomley","email":"nhbottomley@gmail.com"},"maintainers":[{"name":"nickbottomley","email":"nhbottomley@gmail.com"}],"dist":{"shasum":"417b440cdeb73a1c70521b275c397f98ac93f40e","tarball":"http://registry.npmjs.org/wassat/-/wassat-0.3.0.tgz"}}: wassat
41 error If you need help, you may report this error at:
41 error     <http://github.com/npm/npm/issues>
42 verbose exit [ 1, true ]
