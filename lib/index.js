// Generated by CoffeeScript 1.8.0
var capitalize, getProto, isPrimitive, primitives, toString, types, wassat;

toString = Object.prototype.toString;

getProto = Object.getPrototypeOf;

capitalize = function(str) {
  return str[0].toUpperCase() + str.slice(1);
};

isPrimitive = function(obj) {
  if (primitives[wassat(obj)]) {
    return true;
  } else {
    return false;
  }
};

primitives = {
  "string": String,
  "number": Number,
  "boolean": Boolean
};

types = {
  "[object String]": "string",
  "[object Number]": "number",
  "[object Boolean]": "boolean",
  "[object Object]": "object",
  "[object Array]": "array",
  "[object Function]": "function",
  "[object RegExp]": "regexp",
  "[object Date]": "date",
  "[object Arguments]": "arguments",
  "[object Undefined]": "undefined",
  "[object Null]": "null"
};

wassat = function(obj) {
  return types[toString.call(obj)];
};

wassat.types = Object.create(null);

Object.keys(types).forEach(function(key) {
  var fnName, type;
  type = types[key];
  fnName = "is" + capitalize(type);
  fnName = fnName === "isRegexp" ? "isRegExp" : fnName;
  wassat[fnName] = function(obj) {
    return wassat(obj) === type;
  };
  return wassat.types[type] = 1;
});

wassat.isNull = function(obj) {
  return wassat(obj) === "null";
};

wassat.isNil = function(obj) {
  var result;
  result = wassat(obj);
  return result === "null" || result === "undefined";
};

wassat.isIt = function(Ctor, obj) {
  var type;
  type = wassat(obj);
  if (isPrimitive(obj)) {
    return Ctor === primitives[type];
  }
  return obj instanceof Ctor;
};

wassat.isItExactly = function(Ctor, obj) {
  var type;
  type = wassat(obj);
  if (isPrimitive(obj)) {
    return Ctor === primitives[type];
  }
  return getProto(obj) === Ctor.prototype;
};

wassat.isAll = function(type, iterable) {
  var item, _i, _len;
  for (_i = 0, _len = iterable.length; _i < _len; _i++) {
    item = iterable[_i];
    if (wassat(item) !== type) {
      return false;
    }
  }
  return true;
};

if (wassat(exports) === "object") {
  module.exports = wassat;
} else {
  global.wassat = wassat;
}
