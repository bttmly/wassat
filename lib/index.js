// Generated by CoffeeScript 1.8.0
var capitalize, getCtor, getProto, toString, types, wassat;

toString = Object.prototype.toString;

getProto = function(value) {
  return Object.getPrototypeOf(Object(value));
};

getCtor = function(value) {
  return Object(value).constructor;
};

capitalize = function(str) {
  return str[0].toUpperCase() + str.slice(1);
};

types = {
  "[object String]": "string",
  "[object Number]": "number",
  "[object Boolean]": "boolean",
  "[object Object]": "object",
  "[object Array]": "array",
  "[object Function]": "function",
  "[object RegExp]": "regexp",
  "[object Date]": "date",
  "[object Arguments]": "arguments",
  "[object Undefined]": "undefined",
  "[object Null]": "null"
};

wassat = function(obj) {
  return types[toString.call(obj)];
};

wassat.types = Object.create(null);

Object.keys(types).forEach(function(key) {
  var fnName, type;
  type = types[key];
  fnName = "is" + capitalize(type);
  fnName = fnName === "isRegexp" ? "isRegExp" : fnName;
  wassat[fnName] = function(value) {
    return wassat(value) === type;
  };
  return wassat.types[type] = true;
});

wassat.isPrimitive = function(value) {
  return Object(value) !== value;
};

wassat.isNil = function(value) {
  return value === null || value === void 0;
};

wassat.isIt = function(Ctor, value) {
  return Object(value) instanceof Ctor;
};

wassat.isItExactly = function(Ctor, value) {
  return getProto(value) === Ctor.prototype;
};

wassat.isAll = function(type, iterable) {
  var item, _i, _len;
  for (_i = 0, _len = iterable.length; _i < _len; _i++) {
    item = iterable[_i];
    if (wassat(item) !== type) {
      return false;
    }
  }
  return true;
};

if (wassat(exports) === "object") {
  module.exports = wassat;
} else {
  global.wassat = wassat;
}
