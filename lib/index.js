// Generated by CoffeeScript 1.12.7
var capitalize, getProto, toString, typeMap, typeNames, wassat;

toString = function(value) {
  return Object.prototype.toString.call(value);
};

getProto = function(value) {
  return Object.getPrototypeOf(Object(value));
};

capitalize = function(str) {
  return str[0].toUpperCase() + str.slice(1);
};

typeNames = ["string", "number", "boolean", "object", "array", "function", "regExp", "date", "error", "arguments", "undefined", "null"];

typeMap = typeNames.reduce(function(map, key) {
  map["[object " + (capitalize(key)) + "]"] = key;
  return map;
}, Object.create(null));

wassat = function(value) {
  return typeMap[toString(value)] || "object";
};

wassat.types = Object.create(null);

Object.keys(typeMap).forEach(function(key) {
  var assert, fnName, isIt, maybe, type;
  type = typeMap[key];
  fnName = "is" + capitalize(type);
  wassat.types[type] = true;
  isIt = function(value) {
    return wassat(value) === type;
  };
  maybe = function(value) {
    return wassat.isNil(value) || isIt(value);
  };
  assert = function(value) {
    if (isIt(value)) {
      return;
    }
    throw new TypeError("Expected " + value + " to be of type " + type);
  };
  wassat[fnName] = isIt;
  wassat[fnName].maybe = maybe;
  return wassat[fnName].assert = assert;
});

Object.freeze(wassat.types);

wassat.isPrimitive = function(value) {
  var type;
  type = typeof value;
  return type === "string" || type === "number" || type === "boolean";
};

wassat.isNil = function(value) {
  return value === null || value === void 0;
};

wassat.isIt = function(Ctor, value) {
  if (Ctor === Object) {
    return value instanceof Object;
  }
  return Object(value) instanceof Ctor;
};

wassat.isItExactly = function(Ctor, value) {
  return getProto(value) === Ctor.prototype;
};

wassat.isAll = function(type, iterable) {
  var i, item, len;
  for (i = 0, len = iterable.length; i < len; i++) {
    item = iterable[i];
    if (wassat(item) !== type) {
      return false;
    }
  }
  return true;
};

module.exports = wassat;
