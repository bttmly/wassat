// Generated by CoffeeScript 1.8.0
var capitalize, getProto, toString, typeMap, typeNames, wassat;

toString = function(value) {
  return Object.prototype.toString.call(value);
};

getProto = function(value) {
  return Object.getPrototypeOf(Object(value));
};

capitalize = function(str) {
  return str[0].toUpperCase() + str.slice(1);
};

typeNames = ["string", "number", "boolean", "object", "array", "function", "regExp", "date", "error", "arguments", "undefined", "null"];

typeMap = typeNames.reduce(function(map, key) {
  map["[object " + (capitalize(key)) + "]"] = key;
  return map;
}, Object.create(null));

wassat = function(value) {
  return typeMap[toString(value)] || "object";
};

wassat.types = Object.create(null);

Object.keys(typeMap).forEach(function(key) {
  var fnName, type;
  type = typeMap[key];
  fnName = "is" + capitalize(type);
  wassat.types[type] = true;
  return wassat[fnName] = function(value) {
    return wassat(value) === type;
  };
});

Object.freeze(wassat.types);

wassat.isPrimitive = function(value) {
  var type;
  type = typeof value;
  return type === "string" || type === "number" || type === "boolean";
};

wassat.isNil = function(value) {
  return value === null || value === void 0;
};

wassat.isIt = function(Ctor, value) {
  return Object(value) instanceof Ctor;
};

wassat.isItExactly = function(Ctor, value) {
  return getProto(value) === Ctor.prototype;
};

wassat.isAll = function(type, iterable) {
  var item, _i, _len;
  for (_i = 0, _len = iterable.length; _i < _len; _i++) {
    item = iterable[_i];
    if (wassat(item) !== type) {
      return false;
    }
  }
  return true;
};

module.exports = wassat;
